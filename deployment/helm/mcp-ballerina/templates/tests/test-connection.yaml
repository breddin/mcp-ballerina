{{- if .Values.tests.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "mcp-ballerina.fullname" . }}-test-connection"
  labels:
    {{- include "mcp-ballerina.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
  - name: wget
    image: {{ .Values.tests.image.registry }}/{{ .Values.tests.image.repository }}:{{ .Values.tests.image.tag }}
    imagePullPolicy: {{ .Values.tests.image.pullPolicy }}
    command: ['sh', '-c']
    args:
    - |
      set -e
      echo "Testing {{ include "mcp-ballerina.fullname" . }} service connection..."
      
      SERVICE_URL="http://{{ include "mcp-ballerina.fullname" . }}:{{ .Values.service.port }}"
      
      echo "Testing health endpoint..."
      curl -f $SERVICE_URL/health
      
      echo "Testing readiness endpoint..."
      curl -f $SERVICE_URL/ready
      
      {{- if .Values.monitoring.serviceMonitor.enabled }}
      echo "Testing metrics endpoint..."
      METRICS_URL="http://{{ include "mcp-ballerina.fullname" . }}-metrics:{{ .Values.service.metricsPort }}{{ .Values.monitoring.serviceMonitor.path }}"
      curl -f $METRICS_URL
      {{- end }}
      
      echo "All tests passed!"
    resources:
      requests:
        cpu: 10m
        memory: 16Mi
      limits:
        cpu: 100m
        memory: 64Mi
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "mcp-ballerina.fullname" . }}-test-api"
  labels:
    {{- include "mcp-ballerina.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
  - name: api-test
    image: {{ .Values.tests.image.registry }}/{{ .Values.tests.image.repository }}:{{ .Values.tests.image.tag }}
    imagePullPolicy: {{ .Values.tests.image.pullPolicy }}
    command: ['sh', '-c']
    args:
    - |
      set -e
      echo "Testing {{ include "mcp-ballerina.fullname" . }} API endpoints..."
      
      SERVICE_URL="http://{{ include "mcp-ballerina.fullname" . }}:{{ .Values.service.port }}"
      
      # Test basic API functionality
      echo "Testing MCP protocol endpoint..."
      curl -f -X POST $SERVICE_URL/mcp \
        -H "Content-Type: application/json" \
        -d '{"jsonrpc": "2.0", "method": "initialize", "params": {}, "id": 1}' || true
      
      echo "Testing version endpoint..."
      curl -f $SERVICE_URL/version || true
      
      echo "Testing status endpoint..."
      curl -f $SERVICE_URL/status || true
      
      echo "API tests completed!"
    resources:
      requests:
        cpu: 10m
        memory: 16Mi
      limits:
        cpu: 100m
        memory: 64Mi
{{- end }}