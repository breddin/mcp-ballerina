version: '3.8'

services:
  # MCP Ballerina Server
  mcp-ballerina-server:
    build:
      context: ../../
      dockerfile: Dockerfile
    image: mcp-ballerina:latest
    container_name: mcp-ballerina-server
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8443:8443"
    expose:
      - "9090"
    environment:
      - MCP_SERVER_PORT=8080
      - MCP_METRICS_PORT=9090
      - LOG_LEVEL=INFO
      - JVM_HEAP_SIZE=1g
      - PROMETHEUS_ENABLED=true
      - METRICS_ENDPOINT=/metrics
    volumes:
      - app-data:/app/data
      - app-logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m
      - /var/tmp:noexec,nosuid,nodev,size=50m

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mcp-network
    depends_on:
      - mcp-ballerina-server
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: mcp-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - mcp-network
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: mcp-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=mcp-kibana
    networks:
      - mcp-network
    depends_on:
      - elasticsearch
    security_opt:
      - no-new-privileges:true

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.3
    container_name: mcp-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - app-logs:/var/log/mcp:ro
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["--strict.perms=false"]
    networks:
      - mcp-network
    depends_on:
      - elasticsearch
    security_opt:
      - no-new-privileges:true

  # Redis for caching and session management
  redis:
    image: redis:7.2.4-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25.3-alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mcp-network
    depends_on:
      - mcp-ballerina-server
    security_opt:
      - no-new-privileges:true

volumes:
  app-data:
    driver: local
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  redis-data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16