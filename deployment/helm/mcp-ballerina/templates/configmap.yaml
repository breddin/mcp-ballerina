apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mcp-ballerina.configMapName" . }}
  labels:
    {{- include "mcp-ballerina.labels" . | nindent 4 }}
    app.kubernetes.io/component: config
  annotations:
    {{- include "mcp-ballerina.annotations" . | nindent 4 }}
    description: "Main configuration for MCP Ballerina Server"
data:
  # Server Configuration
  server.toml: |
    [server]
    host = {{ .Values.config.server.host | quote }}
    port = {{ .Values.config.server.port }}
    environment = {{ .Values.config.server.environment | quote }}
    
    {{- if .Values.config.server.ssl.enabled }}
    [server.ssl]
    enabled = {{ .Values.config.server.ssl.enabled }}
    port = {{ .Values.config.server.ssl.port }}
    {{- end }}
    
    [logging]
    level = {{ .Values.config.logging.level | quote }}
    format = {{ .Values.config.logging.format | quote }}
    output = {{ .Values.config.logging.output | quote }}
    
    {{- if .Values.config.logging.audit.enabled }}
    [logging.audit]
    enabled = {{ .Values.config.logging.audit.enabled }}
    level = {{ .Values.config.logging.audit.level | quote }}
    {{- end }}
    
    {{- if .Values.config.metrics.enabled }}
    [metrics]
    enabled = {{ .Values.config.metrics.enabled }}
    port = {{ .Values.config.metrics.port }}
    path = {{ .Values.config.metrics.path | quote }}
    {{- end }}
    
    {{- if .Values.config.health.enabled }}
    [health]
    enabled = {{ .Values.config.health.enabled }}
    path = {{ .Values.config.health.path | quote }}
    {{- end }}
    
    [mcp]
    version = {{ .Values.config.mcp.version | quote }}
    timeout = {{ .Values.config.mcp.timeout | quote }}
    max_connections = {{ .Values.config.mcp.max_connections }}
    
    [mcp.transport]
    type = {{ .Values.config.mcp.transport.type | quote }}
    buffer_size = {{ .Values.config.mcp.transport.buffer_size }}
    
    [database]
    type = {{ .Values.config.database.type | quote }}
    max_connections = {{ .Values.config.database.max_connections }}
    connection_timeout = {{ .Values.config.database.connection_timeout | quote }}
    idle_timeout = {{ .Values.config.database.idle_timeout | quote }}
    
    {{- if .Values.config.cache.enabled }}
    [cache]
    enabled = {{ .Values.config.cache.enabled }}
    type = {{ .Values.config.cache.type | quote }}
    ttl = {{ .Values.config.cache.ttl | quote }}
    max_size = {{ .Values.config.cache.max_size | quote }}
    {{- end }}

  # Application Properties
  application.properties: |
    # Ballerina Runtime Configuration
    ballerina.runtime.debug=false
    ballerina.runtime.trace=false
    ballerina.runtime.profile={{ .Values.app.environment }}
    
    # JVM Settings
    java.opts={{ .Values.deployment.env.JAVA_OPTS }}
    
    # Security
    security.auth.enabled=true
    security.tls.version=1.3
    security.cors.enabled=true
    security.cors.origins=*
    
    # Performance
    performance.thread.pool.size=50
    performance.connection.pool.size=20
    performance.request.timeout=30000

  # Log Configuration
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
          <JsonLayout compact="true" eventEol="true">
            <KeyValuePair key="timestamp" value="$${date:yyyy-MM-dd'T'HH:mm:ss.SSSZ}"/>
            <KeyValuePair key="level" value="$${level}"/>
            <KeyValuePair key="thread" value="$${thread}"/>
            <KeyValuePair key="logger" value="$${logger}"/>
            <KeyValuePair key="message" value="$${message}"/>
            <KeyValuePair key="service" value="{{ include "mcp-ballerina.name" . }}"/>
            <KeyValuePair key="version" value="{{ .Chart.AppVersion }}"/>
            <KeyValuePair key="pod" value="${sys:HOSTNAME:-unknown}"/>
          </JsonLayout>
        </Console>
      </Appenders>
      <Loggers>
        <Root level="{{ .Values.config.logging.level }}">
          <AppenderRef ref="Console"/>
        </Root>
        <Logger name="org.ballerinalang" level="{{ .Values.config.logging.level }}"/>
        <Logger name="io.ballerina" level="{{ .Values.config.logging.level }}"/>
        <Logger name="mcp.ballerina" level="DEBUG"/>
      </Loggers>
    </Configuration>

  {{- if .Values.nginx.enabled }}
  # Nginx Configuration (for sidecar proxy)
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format json_combined escape=json
          '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status": "$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"upstream_response_time":"$upstream_response_time",'
            '"upstream_addr":"$upstream_addr"'
          '}';
        
        access_log /var/log/nginx/access.log json_combined;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        upstream mcp_backend {
            server localhost:8080;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location / {
                proxy_pass http://mcp_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
        }
    }
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mcp-ballerina.scriptsConfigMapName" . }}
  labels:
    {{- include "mcp-ballerina.labels" . | nindent 4 }}
    app.kubernetes.io/component: scripts
  annotations:
    {{- include "mcp-ballerina.annotations" . | nindent 4 }}
data:
  entrypoint.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Starting MCP Ballerina Server..."
    echo "Pod: ${HOSTNAME}"
    echo "Namespace: ${POD_NAMESPACE}"
    echo "Service Account: ${SERVICE_ACCOUNT}"
    
    # Wait for dependencies
    if [ "${WAIT_FOR_DEPS:-true}" = "true" ]; then
        echo "Waiting for dependencies..."
        
        {{- if .Values.postgresql.enabled }}
        # Wait for PostgreSQL
        until nc -z "{{ .Release.Name }}-postgresql" "5432"; do
            echo "Waiting for PostgreSQL..."
            sleep 2
        done
        echo "PostgreSQL is ready!"
        {{- end }}
        
        {{- if .Values.redis.enabled }}
        # Wait for Redis
        until nc -z "{{ .Release.Name }}-redis-master" "6379"; do
            echo "Waiting for Redis..."
            sleep 2
        done
        echo "Redis is ready!"
        {{- end }}
    fi
    
    # Set up directories
    mkdir -p /app/logs /app/data /app/temp
    
    # Set permissions
    chown -R app:app /app
    
    # Start the application
    echo "Starting Ballerina application..."
    exec su-exec app:app bal run /app/mcp-ballerina.jar \
        --config.file=/config/server.toml \
        --logging.config=/config/log4j2.xml

  healthcheck.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Basic HTTP health check
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "000")
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "Health check passed (HTTP $HTTP_CODE)"
        exit 0
    else
        echo "Health check failed (HTTP $HTTP_CODE)"
        exit 1
    fi

  readiness.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Check if application is ready to accept requests
    READY_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ready || echo "000")
    
    if [ "$READY_CODE" -eq 200 ]; then
        echo "Readiness check passed (HTTP $READY_CODE)"
        exit 0
    else
        echo "Readiness check failed (HTTP $READY_CODE)"
        exit 1
    fi