1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "mcp-ballerina.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "mcp-ballerina.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "mcp-ballerina.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "mcp-ballerina.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Get the service status:
   kubectl --namespace {{ .Release.Namespace }} get all -l "{{ include "mcp-ballerina.selectorLabels" . }}"

3. Check the application health:
   kubectl --namespace {{ .Release.Namespace }} exec -it deployment/{{ include "mcp-ballerina.fullname" . }} -- curl http://localhost:8080/health

4. View the application logs:
   kubectl --namespace {{ .Release.Namespace }} logs deployment/{{ include "mcp-ballerina.fullname" . }} -c {{ .Chart.Name }}

{{- if .Values.monitoring.serviceMonitor.enabled }}

5. Access metrics:
   kubectl --namespace {{ .Release.Namespace }} port-forward service/{{ include "mcp-ballerina.fullname" . }}-metrics {{ .Values.service.metricsPort }}:{{ .Values.service.metricsPort }}
   Then visit: http://localhost:{{ .Values.service.metricsPort }}{{ .Values.monitoring.serviceMonitor.path }}
{{- end }}

{{- if .Values.postgresql.enabled }}

6. Access PostgreSQL:
   kubectl --namespace {{ .Release.Namespace }} port-forward service/{{ .Release.Name }}-postgresql 5432:5432
   PGPASSWORD="{{ .Values.postgresql.auth.password }}" psql -h 127.0.0.1 -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}
{{- end }}

{{- if .Values.redis.enabled }}

7. Access Redis:
   kubectl --namespace {{ .Release.Namespace }} port-forward service/{{ .Release.Name }}-redis-master 6379:6379
   redis-cli -h 127.0.0.1 -p 6379{{- if .Values.redis.auth.enabled }} -a {{ .Values.redis.auth.password }}{{- end }}
{{- end }}

{{- if .Values.autoscaling.hpa.enabled }}

8. View autoscaling status:
   kubectl --namespace {{ .Release.Namespace }} get hpa {{ include "mcp-ballerina.fullname" . }}
{{- end }}

{{- if .Values.tests.enabled }}

9. Run application tests:
   helm test {{ .Release.Name }} --namespace {{ .Release.Namespace }}
{{- end }}

Configuration Summary:
- Chart Version: {{ .Chart.Version }}
- App Version: {{ .Chart.AppVersion }}
- Replicas: {{ .Values.deployment.replicaCount }}
- Environment: {{ .Values.app.environment }}
{{- if .Values.ingress.enabled }}
- Ingress: Enabled ({{ .Values.ingress.className }})
{{- else }}
- Ingress: Disabled
{{- end }}
{{- if .Values.autoscaling.hpa.enabled }}
- Auto-scaling: Enabled ({{ .Values.autoscaling.hpa.minReplicas }}-{{ .Values.autoscaling.hpa.maxReplicas }} replicas)
{{- else }}
- Auto-scaling: Disabled
{{- end }}
{{- if .Values.persistence.data.enabled }}
- Persistent Storage: Enabled ({{ .Values.persistence.data.size }})
{{- else }}
- Persistent Storage: Disabled
{{- end }}
{{- if .Values.monitoring.serviceMonitor.enabled }}
- Monitoring: Enabled (Prometheus)
{{- else }}
- Monitoring: Disabled
{{- end }}

For more information, visit: https://github.com/example/mcp-ballerina